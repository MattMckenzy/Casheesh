@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between">
    <div class="d-flex flex-row align-items-center">
        <div class="col-auto p-0 m-0 mr-2 button-container">
            <input @ref="BalancesCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="BalanceEditingToggle@($"{Account.Name}{Balance.Id}")" />
            <label class="button-label m-0" for="BalanceEditingToggle@($"{Account.Name}{Balance.Id}")">
                <i class="button-bright button-subtle position-absolute open-button mdi mdi-pencil icon-responsive" @onclick="ToggleBalanceEditing"></i>
                <i class="button-bright button-subtle position-absolute close-button mdi mdi-close icon-responsive" @onclick="ToggleBalanceEditing"></i>
            </label>
        </div>
        <div class="text-stroke mr-3">@($"{Balance.Timestamp.ToShortDateString()}")</div>
    </div>
    <div class="text-stroke text-right @(Balance.Value >= 0 ? "color-teal" : Balance.Value <= 0 ? "color-red" : string.Empty)">@(Balance.Value.ToString("C", CultureInfo.GetCultureInfo("en-CA")))</div>
</div>
<div @ref="BalanceEditingContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center my-2 mr-1">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewBalanceTimestamp" type="date" class="name-input m-0 w-100" Name="NewBalanceTimestamp" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between">
        <div>
            <label class="text-stroke m-0 mr-2">Value:</label>
            <input @bind="NewBalanceValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewBalanceValue" />
        </div>
        <div>
            <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="EditBalance"></i>
            <i class="button-bright color-red float-right mdi mdi-delete icon-responsive p-0 m-0 mr-1" @onclick="DeleteBalance"></i>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback<Account> AccountChanged { get; set; }

    [Parameter]
    public Balance Balance { get; set; }
    [Parameter]
    public EventCallback<Balance> BalanceChanged { get; set; }

    private bool IsShowingBalanceEditing { get; set; } = false;

    private ElementReference BalancesCreationCheckboxReference { get; set; }
    private ElementReference BalanceEditingContainerReference { get; set; }

    private string NewBalanceValue { get; set; } = string.Empty;
    private DateTime NewBalanceTimestamp { get; set; }

    protected override Task OnParametersSetAsync()
    {
        NewBalanceValue = Balance.Value.ToString();
        NewBalanceTimestamp = Balance.Timestamp;

        return base.OnParametersSetAsync();
    }

    private async Task ToggleBalanceEditing()
    {
        if (!IsShowingBalanceEditing)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BalanceEditingContainerReference, 78);
            IsShowingBalanceEditing = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BalanceEditingContainerReference, 0);
            IsShowingBalanceEditing = false;
        }
    }

    private async Task EditBalance()
    {
        await ToggleBalanceEditing();
        await JSRuntime.InvokeVoidAsync("UncheckElement", BalancesCreationCheckboxReference);

        Balance.Value = double.Parse(NewBalanceValue);
        Balance.Timestamp = NewBalanceTimestamp;
        await Context.SaveChangesAsync();

        await AccountChanged.InvokeAsync(Account);
    }

    private async Task DeleteBalance()
    {
        bool isDeletingBalance = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure wou wish to delete the balance: \"{Balance.Timestamp.ToShortDateString()} - {Balance.Value} \"?");
        if (isDeletingBalance)
        {
            await ToggleBalanceEditing();
            await JSRuntime.InvokeVoidAsync("UncheckElement", BalancesCreationCheckboxReference);

            Account.Balances.Remove(Balance);
            await Context.SaveChangesAsync();

            await AccountChanged.InvokeAsync(Account);
        }

    }

}
