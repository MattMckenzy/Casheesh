@inject IJSRuntime JSRuntime
@inject CasheeshContext Context  

<div class="row align-items-center mx-3 mt-3">
    <h5 class="col m-0 p-0 text-stroke">Transactions</h5>
    <div class="col-auto p-0 button-container button-container-36">
        <input @ref="TransactionsCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="CreateTransactionToggle@(Account.Name)" />
        <label class="button-label button-label-36 m-0" for="CreateTransactionToggle@(Account.Name)">
            <i class="button-bright position-absolute open-button mdi mdi-plus mdi-36px icon-responsive-36" @onclick="ToggleTransactionCreation"></i>
            <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleTransactionCreation"></i>
        </label>
    </div>
</div>

<div @ref="TransactionCreationContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 my-2">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewTransactionDescription" class="name-input m-0 w-100" Name="NewTransactionDescription" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between mx-3 mb-3">
        <div class="d-flex flex-row align-items-center">
            <i class="button-bright mdi mdi-swap-horizontal icon-responsive m-0 mr-2" @onclick="ToggleValueMode"></i>
            <label class="text-stroke m-0 mr-2">@(IsTransactionMode ? "Value:" : "New balance:")</label>
            <input @bind="NewTransactionValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewTransactionValue" />
        </div>
        <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="CreateTransaction"></i>
    </div>
</div>

<ul class="list-group list-group-flush my-3">
    <Virtualize Context=transaction Items=@(Account.Transactions.OrderByDescending(transaction => transaction.Number).ToList()) OverscanCount="25">
        @{
            Transaction? transactionEntity = Context.Transactions.Find(transaction.AccountName, transaction.Number); 
            if (transactionEntity != null)
            {
                <li class="list-group-item bg-dark">
                    <TransactionItem @bind-Account=Account @bind-Account:after=@(async () => await AccountChanged.InvokeAsync(Account)) @bind-Transaction=transactionEntity />
                </li>
            }
        }
    </Virtualize>
</ul>

@code {

    [Parameter]
    public required Account Account { get; set; }
    [Parameter]
    public required EventCallback<Account> AccountChanged { get; set; }

    private bool IsShowingTransactionCreation { get; set; } = false;
    private bool IsTransactionMode { get; set; } = true;

    private ElementReference TransactionsCreationCheckboxReference { get; set; }
    private ElementReference TransactionCreationContainerReference { get; set; }

    private string NewTransactionValue { get; set; } = string.Empty;
    private string NewTransactionDescription { get; set; } = string.Empty;

    private async Task ToggleTransactionCreation()
    {
        if (!IsShowingTransactionCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionCreationContainerReference, 78);
            IsShowingTransactionCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionCreationContainerReference, 0);
            IsShowingTransactionCreation = false;
        }
    }

    private Task ToggleValueMode()
    {
        if (!IsTransactionMode)
        {
            IsTransactionMode = true;
        }
        else
        {
            IsTransactionMode = false;
        }

        return Task.CompletedTask;
    }

    private async Task CreateTransaction()
    {
        Transaction transaction = new Transaction
        {
            Description = NewTransactionDescription,
            Value = IsTransactionMode ? double.Parse(NewTransactionValue) : double.Parse(NewTransactionValue) - Account.CurrentBalance,
            AccountName = Account.Name,
            Account = Account,
            Timestamp = DateTime.Now,
            Number = !Account.Transactions.Any() ? 1 : Account.Transactions.OrderByDescending(transaction => transaction.Timestamp).First().Number+1
        };

        Account.Transactions.Add(transaction);
        Account.CurrentBalance += IsTransactionMode ? double.Parse(NewTransactionValue) : double.Parse(NewTransactionValue) - Account.CurrentBalance;
        await Context.SaveChangesAsync();

        await ToggleTransactionCreation();
        NewTransactionDescription = string.Empty;
        NewTransactionValue = string.Empty;
        await JSRuntime.InvokeVoidAsync("UncheckElement", TransactionsCreationCheckboxReference);

        await AccountChanged.InvokeAsync(Account);
    }
}
