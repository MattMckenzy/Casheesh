@inject IJSRuntime JSRuntime
@inject CasheeshContext Context  

<div class="row align-items-center m-3">
    <h5 class="col m-0 p-0 text-stroke">Transactions</h5>
    <div class="col-auto p-0 button-container button-container-36">
        <input @ref="TransactionsCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="CreateTransactionToggle@(Account.Name)" />
        <label class="button-label button-label-36 m-0" for="CreateTransactionToggle@(Account.Name)">
            <i class="button-bright position-absolute open-button mdi mdi-plus mdi-36px icon-responsive-36" @onclick="ToggleTransactionCreation"></i>
            <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleTransactionCreation"></i>
        </label>
    </div>
</div>

<div @ref="TransactionCreationContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewTransactionDescription" class="name-input m-0 w-100" Name="NewTransactionDescription" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between mx-3 mb-3">
        <div>
            <label class="text-stroke m-0 mr-2">Value:</label>
            <input @bind="NewTransactionValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewTransactionValue" />
        </div>
        <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="CreateTransaction"></i>
    </div>
</div>

<ul class="list-group list-group-flush">
    @foreach (Transaction transaction in Account.Transactions.OrderByDescending(transaction => transaction.Number).ToList())
    {
        Transaction transactionEntity = Context.Transactions.Find(transaction.AccountName, transaction.Number);
        <li class="list-group-item bg-dark">
            <TransactionItem @bind-Account="BoundAccount" @bind-Transaction="transactionEntity" />
        </li>
    }
</ul>

@code {

    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback<Account> AccountChanged { get; set; }

    private Account BoundAccount
    {
        get => Account;
        set => AccountChanged.InvokeAsync(value);
    }

    private bool IsShowingTransactionCreation { get; set; } = false;

    private ElementReference TransactionsCreationCheckboxReference { get; set; }
    private ElementReference TransactionCreationContainerReference { get; set; }

    private double NewTransactionValue { get; set; } = 0;
    private string NewTransactionDescription { get; set; }

    private async Task ToggleTransactionCreation()
    {
        if (!IsShowingTransactionCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionCreationContainerReference, 82);
            IsShowingTransactionCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionCreationContainerReference, 0);
            IsShowingTransactionCreation = false;
        }
    }

    private async Task CreateTransaction()
    {
        if (NewTransactionValue == 0)
        {
            await JSRuntime.InvokeAsync<string>("alert", $"Please enter a non-zero value for the transaction amount.");
            return;
        }

        Transaction transaction = new Transaction 
        { 
            Description = NewTransactionDescription, 
            Value = NewTransactionValue, 
            AccountName = Account.Name, 
            Timestamp = DateTime.Now, 
            Number = Account.Transactions.Count == 0 ? 1 : Account.Transactions.OrderByDescending(transaction => transaction.Timestamp).First().Number+1 
        };
        Account.Transactions.Add(transaction);
        Account.Balance += NewTransactionValue;
        await Context.SaveChangesAsync();

        await ToggleTransactionCreation();
        NewTransactionDescription = string.Empty;
        NewTransactionValue = 0;
        await JSRuntime.InvokeVoidAsync("UncheckElement", TransactionsCreationCheckboxReference);

        await AccountChanged.InvokeAsync(Account);
    }
}
