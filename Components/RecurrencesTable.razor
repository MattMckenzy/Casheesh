@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="row align-items-center mx-3 mt-3">
    <h5 class="col m-0 p-0 text-stroke">Recurrences</h5>
    <div class="col-auto p-0 button-container button-container-36">
        <input @ref="RecurrencesCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="CreateRecurrenceToggle@(Account.Name)" />
        <label class="button-label button-label-36 m-0" for="CreateRecurrenceToggle@(Account.Name)">
            <i class="button-bright position-absolute open-button mdi mdi-plus mdi-36px icon-responsive-36" @onclick="ToggleRecurrenceCreation"></i>
            <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleRecurrenceCreation"></i>
        </label>
    </div>
</div>

<div @ref="RecurrenceCreationContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 my-2">
        <label class="text-stroke m-0 mr-2">Name:</label>
        <input @bind="NewRecurrenceName" class="name-input @(IsNewRecurrenceNameValid ? "input-valid" : "input-invalid") m-0" style="width:150px;" @oninput="NewRecurrenceNameChanged" Name="NewRecurrenceName" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewRecurrenceDescription" class="name-input m-0 w-100" Name="NewRecurrenceDescription" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">First date:</label>
        <input @bind="NewRecurrenceFirstDate" class="name-input text-right m-0" type="date" step="1" Name="NewRecurrenceFirstDate" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Days between:</label>
        <input @bind="NewRecurrenceDays" class="name-input text-right m-0" type="number" step="1" min="1" style="width:52px;" Name="NewRecurrenceDays" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between mx-3 mb-3">
        <div>
            <label class="text-stroke m-0 mr-2">Value:</label>
            <input @bind="NewRecurrenceValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewRecurrenceValue" />
        </div>
        <i class="button-bright mdi @(IsNewRecurrenceNameValid ? string.Empty : "button-disabled") mdi-content-save icon-responsive m-0" @onclick="CreateRecurrence"></i>
    </div>
</div>

<ul class="list-group list-group-flush my-3">
    @foreach (Recurrence recurrence in Account.Recurrences.OrderByDescending(recurrence => recurrence.LastApplied).ToList())
    {
        Recurrence recurrenceEntity = Context.Recurrences.Find(recurrence.AccountName, recurrence.Name);
        <li class="list-group-item bg-dark">
            <RecurrenceItem @bind-Account="BoundAccount" @bind-Recurrence="recurrenceEntity" />
        </li>
    }
</ul>

@code {

    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback<Account> AccountChanged { get; set; }

    private Account BoundAccount
    {
        get => Account;
        set => AccountChanged.InvokeAsync(value);
    }

    private bool IsShowingRecurrenceCreation { get; set; } = false;
    private bool IsNewRecurrenceNameValid { get; set; } = false;

    private ElementReference RecurrencesCreationCheckboxReference { get; set; }
    private ElementReference RecurrenceCreationContainerReference { get; set; }

    private string NewRecurrenceName { get; set; }
    private string NewRecurrenceDescription { get; set; }
    private double NewRecurrenceValue { get; set; } = 0;
    private int NewRecurrenceDays { get; set; } = 0;
    private DateTime NewRecurrenceFirstDate { get; set; } = DateTime.Now;

    private async Task NewRecurrenceNameChanged(ChangeEventArgs changeEventArgs)
    {
        if (string.IsNullOrWhiteSpace((string)changeEventArgs.Value) || await Context.FindAsync<Recurrence>(Account.Name, (string)changeEventArgs.Value) != null)
            IsNewRecurrenceNameValid = false;
        else
            IsNewRecurrenceNameValid = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleRecurrenceCreation()
    {
        if (!IsShowingRecurrenceCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", RecurrenceCreationContainerReference, 192);
            IsShowingRecurrenceCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", RecurrenceCreationContainerReference, 0);
            IsShowingRecurrenceCreation = false;
        }
    }

    private async Task CreateRecurrence()
    {
        if (string.IsNullOrWhiteSpace(NewRecurrenceName) || await Context.FindAsync<Recurrence>(Account.Name, NewRecurrenceName) != null)
        {
            await JSRuntime.InvokeAsync<string>("alert", $"Please enter a valid unique name for the account.");
            return;
        }

        Recurrence recurrence = new Recurrence
        {
            AccountName = Account.Name,
            Name = NewRecurrenceName,
            Description = NewRecurrenceDescription,
            Value = NewRecurrenceValue,
            TimeSpan = TimeSpan.FromDays(NewRecurrenceDays),
            LastApplied = NewRecurrenceFirstDate - TimeSpan.FromDays(NewRecurrenceDays)
        };
        Account.Recurrences.Add(recurrence);
        await Context.SaveChangesAsync();

        await ToggleRecurrenceCreation();
        NewRecurrenceName = string.Empty;
        NewRecurrenceDescription = string.Empty;
        NewRecurrenceValue = 0;
        NewRecurrenceDays = 0;
        NewRecurrenceFirstDate = DateTime.Now;
        await JSRuntime.InvokeVoidAsync("UncheckElement", RecurrencesCreationCheckboxReference);

        await AccountChanged.InvokeAsync(Account);
    }
}
