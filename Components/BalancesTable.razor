@inject IJSRuntime JSRuntime
@inject CasheeshContext Context  

<div class="row align-items-center mx-3 mt-3">
    <h5 class="col m-0 p-0 text-stroke">Balance History</h5>
    <div class="col-auto p-0 button-container button-container-36">
        <input @ref="BalancesCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="CreateBalanceToggle@(Account.Name)" />
        <label class="button-label button-label-36 m-0" for="CreateBalanceToggle@(Account.Name)">
            <i class="button-bright position-absolute open-button mdi mdi-plus mdi-36px icon-responsive-36" @onclick="ToggleBalanceCreation"></i>
            <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleBalanceCreation"></i>
        </label>
    </div>
</div>

<div @ref="BalanceCreationContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 my-2">
        <label class="text-stroke m-0 mr-2">Timestamp:</label>
        <input @bind="NewBalanceTimestamp" type="date" class="name-input m-0 w-100" Name="NewBalanceTimestamp" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between mx-3 mb-3">
        <div class="d-flex flex-row align-items-center">
            <label class="text-stroke m-0 mr-2">Value:</label>
            <input @bind="NewBalanceValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewBalanceValue" />
        </div>
        <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="CreateBalance"></i>
    </div>
</div>

<ul class="list-group list-group-flush my-3">
    @foreach (Balance balance in Account.Balances.OrderByDescending(balance => balance.Timestamp).ToList())
    {
        Balance balanceEntity = Context.Balances.Find(Account.Name, balance.Id);
        <li class="list-group-item bg-dark">
            <BalanceItem @bind-Account="BoundAccount" @bind-Balance="balanceEntity" />
        </li>
    }
</ul>

@code {

    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback<Account> AccountChanged { get; set; }

    private Account BoundAccount
    {
        get => Account;
        set => AccountChanged.InvokeAsync(value);
    }

    private bool IsShowingBalanceCreation { get; set; } = false;
    private bool IsBalanceMode { get; set; } = true;

    private ElementReference BalancesCreationCheckboxReference { get; set; }
    private ElementReference BalanceCreationContainerReference { get; set; }

    private string NewBalanceValue { get; set; } = string.Empty;
    private DateTime NewBalanceTimestamp { get; set; } = DateTime.Now;

    private async Task ToggleBalanceCreation()
    {
        if (!IsShowingBalanceCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BalanceCreationContainerReference, 78);
            IsShowingBalanceCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BalanceCreationContainerReference, 0);
            IsShowingBalanceCreation = false;
        }
    }

    private async Task CreateBalance()
    {
        Balance latestBalance = Account.Balances.OrderByDescending(balance => balance.Id).FirstOrDefault();
        Balance balance = new Balance
        {
            Value = double.Parse(NewBalanceValue),
            Id = !Account.Balances.Any() ? 1 : latestBalance.Id + 1,
            Timestamp = NewBalanceTimestamp
        };

        Account.Balances.Add(balance);
        await Context.SaveChangesAsync();

        await ToggleBalanceCreation();
        NewBalanceTimestamp = DateTime.Now;
        NewBalanceValue = string.Empty;
        await JSRuntime.InvokeVoidAsync("UncheckElement", BalancesCreationCheckboxReference);

        await AccountChanged.InvokeAsync(Account);
    }
}
