@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between">
    <div class="d-flex flex-row align-items-center">
        <div class="col-auto p-0 m-0 mr-2 button-container">
            <input @ref="TransactionsCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="TransactionEditingToggle@($"{Account.Name}{Transaction.Number}")" />
            <label class="button-label m-0" for="TransactionEditingToggle@($"{Account.Name}{Transaction.Number}")">
                <i class="button-bright button-subtle position-absolute open-button mdi mdi-pencil icon-responsive" @onclick="ToggleTransactionEditing"></i>
                <i class="button-bright button-subtle position-absolute close-button mdi mdi-close icon-responsive" @onclick="ToggleTransactionEditing"></i>
            </label>
        </div>
        <div class="text-stroke mr-3">@($"{Transaction.Number}. {Transaction.Timestamp.ToShortDateString()} - {Transaction.Description}")</div>
    </div>
    <div class="text-stroke text-right @(Transaction.Value >= 0 ? "color-teal" : Transaction.Value <= 0 ? "color-red" : string.Empty)">@(Transaction.Value.ToString("C", CultureInfo.GetCultureInfo(Environment.GetEnvironmentVariable("CULTURE"))))</div>
</div>
<div @ref="TransactionEditingContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center my-2 mr-1">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewTransactionDescription" class="name-input m-0 w-100" Name="NewTransactionDescription" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between">
        <div>
            <label class="text-stroke m-0 mr-2">Value:</label>
            <input @bind="NewTransactionValue" class="name-input text-right m-0" type="number" step="0.01" style="width:94px;" Name="NewTransactionValue" />
        </div>
        <div>
            <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="EditTransaction"></i>
            <i class="button-bright color-red float-right mdi mdi-delete icon-responsive p-0 m-0 mr-1" @onclick="DeleteTransaction"></i>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Account Account { get; set; }
    [Parameter]
    public EventCallback<Account> AccountChanged { get; set; }

    [Parameter]
    public Transaction Transaction { get; set; }
    [Parameter]
    public EventCallback<Transaction> TransactionChanged { get; set; }

    private bool IsShowingTransactionEditing { get; set; } = false;

    private ElementReference TransactionsCreationCheckboxReference { get; set; }
    private ElementReference TransactionEditingContainerReference { get; set; }

    private string NewTransactionValue { get; set; } = string.Empty;
    private string NewTransactionDescription { get; set; }

    protected override Task OnParametersSetAsync()
    {
        NewTransactionValue = Transaction.Value.ToString();
        NewTransactionDescription = Transaction.Description;

        return base.OnParametersSetAsync();
    }

    private async Task ToggleTransactionEditing()
    {
        if (!IsShowingTransactionEditing)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionEditingContainerReference, 78);
            IsShowingTransactionEditing = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", TransactionEditingContainerReference, 0);
            IsShowingTransactionEditing = false;
        }
    }

    private async Task EditTransaction()
    {
        await ToggleTransactionEditing();
        await JSRuntime.InvokeVoidAsync("UncheckElement", TransactionsCreationCheckboxReference);

        Transaction.Value = double.Parse(NewTransactionValue);
        Transaction.Description = NewTransactionDescription;
        Account.CurrentBalance += (Transaction.Value - ((Transaction)Context.Entry(Transaction).OriginalValues.ToObject()).Value);
        await Context.SaveChangesAsync();

        await AccountChanged.InvokeAsync(Account);
    }

    private async Task DeleteTransaction()
    {
        bool isDeletingTransaction = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure wou wish to delete the transaction: \"{Transaction.Number} - {Transaction.Description} \"?");
        if (isDeletingTransaction)
        {
            await ToggleTransactionEditing();
            await JSRuntime.InvokeVoidAsync("UncheckElement", TransactionsCreationCheckboxReference);

            Account.Transactions.Remove(Transaction);
            Account.CurrentBalance -= Transaction.Value;
            await Context.SaveChangesAsync();

            await AccountChanged.InvokeAsync(Account);
        }

    }

}
