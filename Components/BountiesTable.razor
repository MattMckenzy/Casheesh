@inject IJSRuntime JSRuntime
@inject CasheeshContext Context  

<div class="row align-items-center mx-3 mt-3">
    <h5 class="col m-0 p-0 text-stroke">Available Bounties</h5>
    <div class="col-auto p-0 button-container button-container-36">
        <input @ref="BountyCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="CreateBountyToggle" />
        <label class="button-label button-label-36 m-0" for="CreateBountyToggle">
            <i class="button-bright position-absolute open-button mdi mdi-plus mdi-36px icon-responsive-36" @onclick="ToggleBountyCreation"></i>
            <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleBountyCreation"></i>
        </label>
    </div>
</div>

<div @ref="BountyCreationContainerReference" class="hidden-container bd-highlight overflow-hidden">
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 my-2">
        <label class="text-stroke m-0 mr-2">Name:</label>
        <input @bind="NewBountyName" class="name-input @(IsNewBountyNameValid ? " input-valid" : "input-invalid" ) m-0" style="width:150px;" @oninput="NewBountyNameChanged" Name="NewBountyName" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Description:</label>
        <input @bind="NewBountyDescription" class="name-input m-0 w-100" Name="NewBountyDescription" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Starting value:</label>
        <input @bind="NewBountyStartingValue" class="name-input text-right m-0" type="number" step="0.01" style="width:100px;" Name="NewBountyStartingValue" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Base value:</label>
        <input @bind="NewBountyBaseValue" class="name-input text-right m-0" type="number" step="0.01" style="width:100px;" Name="NewBountyBaseValue" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Max value:</label>
        <input @bind="NewBountyMaxValue" class="name-input text-right m-0" type="number" step="0.01" style="width:100px;" Name="NewBountyMaxValue" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Increment value:</label>
        <input @bind="NewBountyIncrementValue" class="name-input text-right m-0" type="number" step="0.01" style="width:100px;" Name="NewBountyIncrementValue" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">First increment date:</label>
        <input @bind="NewBountyFirstIncrementDate" class="name-input text-right m-0" type="date" step="1" Name="NewBountyFirstIncrementDate" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center mx-3 mb-2">
        <label class="text-stroke m-0 mr-2">Days between increments:</label>
        <input @bind="NewBountyIncrementRecurrenceDays" class="name-input text-right m-0" type="number" step="1" min="1" style="width:52px;" Name="NewBountyIncrementRecurrenceDays" />
    </div>
    <div class="d-flex flex-row flex-grow-1 bd-highlight align-items-center justify-content-between mx-3 mb-3">
        <div>
            <label class="text-stroke m-0 mr-2">Is Rate:</label>
            <input @bind="NewBountyIncrementIsRate" class="name-input text-right m-0" type="checkbox" Name="NewBountyIncrementIsRate" />
        </div>
        <i class="button-bright mdi @(IsNewBountyNameValid ? string.Empty : " button-disabled") mdi-content-save icon-responsive m-0" @onclick="CreateBounty"></i>
    </div>
</div>

<ul class="list-group list-group-flush my-3">
    <Virtualize Context=bounty Items=@(Context.Bounties.OrderByDescending(bounty => bounty.Value).ToList()) OverscanCount="25">
        @{
            Bounty? bountyEntity = Context.Bounties.Find(bounty.Name);

            if (bountyEntity != null)
            {
                <li class="list-group-item bg-dark">
                    <BountyItem @bind-Bounty="bountyEntity" AccountChangedCallback="AccountChangedCallback" BountiesChangedCallback="BountiesChangedCallback" />
                </li>
            }
        }
    </Virtualize>
</ul>

@code {

    [Parameter]
    public EventCallback AccountChangedCallback { get; set; }

    [Parameter]
    public EventCallback BountiesChangedCallback { get; set; }

    private bool IsShowingBountyCreation { get; set; } = false;
    private bool IsNewBountyNameValid { get; set; } = false;

    private ElementReference BountyCreationCheckboxReference { get; set; }
    private ElementReference BountyCreationContainerReference { get; set; }

    private string NewBountyName { get; set; } = string.Empty;
    private string NewBountyDescription { get; set; } = string.Empty;
    private string NewBountyStartingValue { get; set; } = string.Empty;
    private string NewBountyBaseValue { get; set; } = string.Empty;
    private string NewBountyMaxValue { get; set; } = string.Empty;
    private string NewBountyIncrementValue { get; set; } = string.Empty;
    private DateTime NewBountyFirstIncrementDate { get; set; } = DateTime.Now + TimeSpan.FromDays(1);
    private string NewBountyIncrementRecurrenceDays { get; set; } = string.Empty;
    private bool NewBountyIncrementIsRate { get; set; } = false;


    private async Task NewBountyNameChanged(ChangeEventArgs changeEventArgs)
    {
        if (string.IsNullOrWhiteSpace((string?)changeEventArgs.Value ?? string.Empty) || await Context.FindAsync<Bounty>((string)changeEventArgs.Value!) != null)
            IsNewBountyNameValid = false;
        else
            IsNewBountyNameValid = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleBountyCreation()
    {
        if (!IsShowingBountyCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BountyCreationContainerReference, 340);
            IsShowingBountyCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", BountyCreationContainerReference, 0);
            IsShowingBountyCreation = false;
        }
    }

    private async Task CreateBounty()
    {
        Bounty bounty = new Bounty
        {
            Name = NewBountyName,
            Description = NewBountyDescription,
            Value = double.Parse(NewBountyStartingValue),
            BaseValue = double.Parse(NewBountyBaseValue),
            MaxValue = double.Parse(NewBountyMaxValue),
            IncrementValue = double.Parse(NewBountyIncrementValue),
            LastApplied = NewBountyFirstIncrementDate - TimeSpan.FromDays(int.Parse(NewBountyIncrementRecurrenceDays)),
            TimeSpan = TimeSpan.FromDays(int.Parse(NewBountyIncrementRecurrenceDays)),
            IsRate = NewBountyIncrementIsRate
        };

        Context.Bounties.Add(bounty);
        await Context.SaveChangesAsync();

        await ToggleBountyCreation();

        NewBountyName = string.Empty;
        NewBountyDescription = string.Empty;
        NewBountyStartingValue = string.Empty;
        NewBountyBaseValue = string.Empty;
        NewBountyMaxValue = string.Empty;
        NewBountyIncrementValue = string.Empty;
        NewBountyFirstIncrementDate = DateTime.Now + TimeSpan.FromDays(1);
        NewBountyIncrementRecurrenceDays  = string.Empty;
        NewBountyIncrementIsRate = false;

        await JSRuntime.InvokeVoidAsync("UncheckElement", BountyCreationCheckboxReference);

        await BountiesChangedCallback.InvokeAsync();
    }
}