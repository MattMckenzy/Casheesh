@page "/"
@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="m-0">
    <div class="row m-0 w-100 align-items-center">

        <img src="favicon.ico" style="height:64px;" class="col-auto p-0 m-3" />
        <h2 class="col m-0 p-0 text-stroke">Casheesh</h2>
        <div class="col-auto m-3 p-0 button-container button-container-36">
            <input @ref="AccountCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="AccountCreationToggle" />
            <label class="button-label button-label-36 m-0" for="AccountCreationToggle">
                <i class="button-bright position-absolute open-button mdi mdi-pencil mdi-36px icon-responsive-36" @onclick=ToggleEditMode></i>
                <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick=ToggleEditMode></i>
            </label>
        </div>
    </div>

    <div @ref="AccountCreationContainerReference" class="hidden-container overflow-hidden">
        <div class="d-flex flex-row bd-highlight align-items-center justify-content-end mb-3 mr-2">
            <i class="button-bright button-label-36 mdi mdi-piggy-bank mdi-36px m-0 mr-2"></i>
            <label class="text-stroke m-0 mr-2">Net worth card:</label>
            <input @bind="EnableNetWorthCard" @bind:after=UpdateSettings class="m-0 mr-2" type="checkbox" id="NetWorthCardCheckbox" />
        </div>
        <div class="d-flex flex-row bd-highlight align-items-center justify-content-end mb-3 mr-2">
            <i class="button-bright button-label-36 mdi mdi-chart-line mdi-36px m-0 mr-2"></i>
            <label class="text-stroke m-0 mr-2">Chart card:</label>
            <input @bind="EnableChartCard" @bind:after=UpdateSettings class="m-0 mr-2" type="checkbox" id="ChartCardCheckbox" />
        </div>
        <div class="d-flex flex-row bd-highlight align-items-center justify-content-end mb-3 mr-2">
            <i class="button-bright button-label-36 mdi mdi-cash-multiple mdi-36px m-0 mr-2"></i>
            <label class="text-stroke m-0 mr-2">Bounties card:</label>
            <input @bind="EnableBountiesCard" @bind:after=UpdateSettings class="m-0 mr-2" type="checkbox" id="NetWorthCardCheckbox" />
        </div>
        <div class="d-flex flex-row bd-highlight align-items-center justify-content-end mb-3 mr-2">
            <i class="button-bright button-label-36 mdi mdi-bank-plus mdi-36px m-0 mr-2"></i>
            <label class="text-stroke m-0 mr-2">Name:</label>
            <input @bind="NewAccountName" class="@(IsNewAccountNameValid ? "input-valid" : "input-invalid") input-name m-0 mr-2" id="AccountName" aria-describedby="AccountNameFeedback" @oninput=NewAccountNameChanged required />
            <i class="button-bright @(IsNewAccountNameValid ? string.Empty : "button-disabled") mdi mdi-content-save icon-responsive m-0" @onclick=CreateAccount></i>
        </div>
    </div>

    <div class="d-flex flex-wrap m-0 justify-content-center">
        @foreach (Account account in Context.Accounts.OrderBy(account => account.Order))
        {
            <AccountCard Account=account @ref="AccountCardReferences[account.Name]" IsEnabled=@(EnableNetWorthCard || account.Name != "Net Worth") AccountChangedCallback=RefreshBalance AccountOrderChangedCallback=ChangeAccountOrder IsEditing=IsEditing> </AccountCard>
        }

        @if (EnableChartCard)
        {
            <div class="card card-worth-graph bg-dark text-white m-3">
                <div class="d-flex flex-row justify-content-between p-3">
                    <div class="d-flex flex-row align-items-center">
                        <h4 class="card-title text-stroke m-0">Net Worth by Date</h4>
                    </div>
                    <i class="button-label mdi mdi-chart-line"></i>
                </div>
                <div class="p-3 w-100 h-100">
                    <Chart @ref=Chart Config=LineConfig></Chart>
                </div>
            </div>
        }

        @if (EnableBountiesCard)
        {
            <BountiesCard AccountChangedCallback=RefreshAccountBalance />
        }
    </div>
</div>

@code
{
    private bool EnableNetWorthCard { get; set; }
    private bool EnableChartCard { get; set; }
    private bool EnableBountiesCard { get; set; }

    private string NewAccountName { get; set; } = string.Empty;
    private bool IsNewAccountNameValid { get; set; } = false;

    private bool IsEditing { get; set; } = false;
    private ElementReference AccountCreationCheckboxReference { get; set; }
    private ElementReference AccountCreationContainerReference { get; set; }

    private Dictionary<string, AccountCard?> AccountCardReferences { get; set; } = new();

    private Chart? Chart { get; set; } = null!;
    private LineConfig? LineConfig { get; set; } = null!;

    private FileInfo SettingsFile { get; set; } = null!;

    private string[] colors =
    {
        "rgb(204,81,81)",
        "rgb(81,204,204)",
        "rgb(142,204,81)",
        "rgb(142,81,204)",
        "rgb(204,173,81)",
        "rgb(81,204,112)",
        "rgb(81,112,204)",
        "rgb(204,81,173)",
        "rgb(204,127,81)",
        "rgb(188,204,81)"
    };

    protected async override Task OnInitializedAsync()
    {
        LineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                MaintainAspectRatio = false,
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date",
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "LL"
                            },
                            Ticks = new TimeTicks
                            {
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Color = "#6c757d"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Balance"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                FontColor = "#ffffff",
                                Callback = new JavaScriptHandler<AxisTickCallback>("chartCallbacks.formatCurrencyString")
                            },
                            GridLines = new GridLines
                            {
                                Color = "#6c757d"
                            }
                        }
                    }
                },
                Legend = new Legend
                {
                    Labels = new LegendLabels
                    {
                        FontColor = "#ffffff"
                    }
                }
            }
        };

        Directory.CreateDirectory("/data");
        SettingsFile = new FileInfo(Path.Combine("/data", "settings.json"));

        if (!SettingsFile.Exists)
        {
            EnableNetWorthCard = true;
            EnableChartCard = true;
            EnableBountiesCard = true;
            await UpdateSettings();
        }

        (EnableNetWorthCard, EnableChartCard, EnableBountiesCard) = JsonConvert.DeserializeObject<(bool, bool, bool)>(File.ReadAllText(SettingsFile.FullName));

        foreach (Account account in Context.Accounts)
        {
            LineConfig.Data.Datasets.Add(new LineDataset<TimePoint>(account.Balances.OrderBy(balance => balance.Timestamp).Select(balance => new TimePoint(balance.Timestamp.Date, balance.Value)))
            {
                Label = account.Name,
                LineTension = 0,
                Fill = false,
                BorderColor = colors[account.Order % 10]
            });
        }

        await RefreshBalance();
    }

    private async Task UpdateSettings()
    {
        File.WriteAllText(SettingsFile.FullName, JsonConvert.SerializeObject((EnableNetWorthCard, EnableChartCard, EnableBountiesCard)));
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleEditMode()
    {
        if (!IsEditing)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 190);
            IsEditing = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 0);
            IsEditing = false;
        }

        await InvokeAsync(StateHasChanged);

        foreach (AccountCard? accountCard in AccountCardReferences.Values)
            if (accountCard != null)
                await accountCard.ToggleEditing();
    }

    private async Task NewAccountNameChanged(ChangeEventArgs changeEventArgs)
    {
        if (string.IsNullOrWhiteSpace((string?)changeEventArgs.Value ?? string.Empty) || await Context.FindAsync<Account>((string)changeEventArgs.Value!) != null)
            IsNewAccountNameValid = false;
        else
            IsNewAccountNameValid = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task CreateAccount()
    {
        if (string.IsNullOrWhiteSpace(NewAccountName) || await Context.FindAsync<Account>(NewAccountName) != null)
        {
            await JSRuntime.InvokeAsync<string>("alert", $"Please enter a valid unique name for the account.");
            return;
        }

        Context.Accounts.Add(new Account
        {            
            Name = NewAccountName,
            CurrentBalance = 0,
            Order = !Context.Accounts.Any() ? 1 : Context.Accounts.OrderByDescending(account => account.Order).First().Order + 1
        });

        int orderReset = 1;
        foreach (Account account in Context.Accounts.OrderBy(account => account.Order).ToList())
            account.Order = orderReset++;

        await Context.SaveChangesAsync();

        NewAccountName = string.Empty;
        IsNewAccountNameValid = false;
    }

    private async Task RefreshBalance()
    {
        AccountCardReferences.TryGetValue("Net Worth", out AccountCard? netWorthCard);
        if (netWorthCard != null)
            await netWorthCard.UpdateNetWorth();
    }

    private async Task RefreshAccountBalance()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeAccountOrder((string AccountName, bool moveUp) newAccountOrder)
    {
        int orderReset = 1;
        foreach (Account account in Context.Accounts.OrderBy(account => account.Order).ToList())
            account.Order = orderReset++;

        Account? changingAccount = Context.Accounts.Find(newAccountOrder.AccountName);
        if (changingAccount == null)
            return;

        int? newAccountOrderNumber =
            newAccountOrder.moveUp ?
            Context.Accounts
                .Where(account => account.Order < changingAccount.Order && (EnableNetWorthCard || account.Name != "Net Worth"))
                .OrderByDescending(account => account.Order).FirstOrDefault()?.Order :
            Context.Accounts
                .Where(account => account.Order > changingAccount.Order && (EnableNetWorthCard || account.Name != "Net Worth"))
                .OrderBy(account => account.Order).FirstOrDefault()?.Order;

        if (newAccountOrderNumber == null)
            return;

        Account? affectedAccount = Context.Accounts.FirstOrDefault(account => account.Order == newAccountOrderNumber);
        if (affectedAccount == null)
            return;

        affectedAccount.Order = changingAccount.Order;
        changingAccount.Order = (int)newAccountOrderNumber;

        await JSRuntime.InvokeVoidAsync("PullAway", changingAccount.Name);
        await JSRuntime.InvokeVoidAsync("PullAway", affectedAccount.Name);

        await Context.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);

        await JSRuntime.InvokeVoidAsync("BringBack", changingAccount.Name);
        await JSRuntime.InvokeVoidAsync("BringBack", affectedAccount.Name);

        await InvokeAsync(StateHasChanged);
    }
}
