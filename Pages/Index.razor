@page "/"
@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="m-0">
    <div class="row m-0 w-100 align-items-center">

        <img src="favicon.ico" style="height:64px;" class="col-auto p-0 m-3" />
        <h2 class="col m-0 p-0 text-stroke">Casheesh</h2>
        <div class="col-auto m-3 p-0 button-container button-container-36">
            <input @ref="AccountCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="AccountCreationToggle" />
            <label class="button-label button-label-36 m-0" for="AccountCreationToggle">
                <i class="button-bright position-absolute open-button mdi mdi-bank-plus mdi-36px icon-responsive-36" @onclick="ToggleAccountCreation"></i>
                <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleAccountCreation"></i>
            </label>
        </div>
    </div>

    <div @ref="AccountCreationContainerReference" class="hidden-container d-flex flex-row bd-highlight align-items-center overflow-hidden justify-content-end mb-3 mr-2">
        <label class="text-stroke m-0 mr-2">Name:</label>
        <input @bind="NewAccountName" class="name-input m-0 mr-2" Name="NewAccountName" />
        <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="CreateAccount"></i>
    </div>

    <div class="d-flex flex-wrap m-0 justify-content-center">
        @foreach (Account account in Context.Accounts)
        {
            <AccountCard Account="account" AccountChangedCallback="RefreshBalance" />
        }

        <div class="card card-worth-graph bg-dark text-white m-3">
            <div class="d-flex flex-row justify-content-between p-3">
                <div class="d-flex flex-row align-items-center">
                    <i class="button-label mdi mdi-chart-line mr-3"></i>
                    <h4 class="card-title text-stroke m-0">Net Worth by Date</h4>
                </div>
                <h3 class="col card-text text-stroke p-0 text-right @(NetWorth >= 0 ? "color-teal" : NetWorth <= 0 ? "color-red" : string.Empty)">@NetWorth.ToString("C", CultureInfo.GetCultureInfo("en-CA"))</h3>
            </div>
            <div class="p-3">
                <Chart @ref="Chart" Config="LineConfig"></Chart>
            </div>            
        </div>
    </div>
</div>

@code
{
    private string NewAccountName { get; set; }
    private bool IsShowingAccountCreation { get; set; } = false;
    private ElementReference AccountCreationCheckboxReference { get; set; }
    private ElementReference AccountCreationContainerReference { get; set; }

    private double NetWorth = 0;

    private Chart Chart;
    private LineConfig LineConfig;

    private string[] colors =
    {
        "rgb(204,81,81)",
        "rgb(81,204,204)",
        "rgb(142,204,81)",
        "rgb(142,81,204)",
        "rgb(204,173,81)",
        "rgb(81,204,112)",
        "rgb(81,112,204)",
        "rgb(204,81,173)",
        "rgb(204,127,81)",
        "rgb(188,204,81)"
    };

    protected async override Task OnInitializedAsync()
    {
        LineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Hover = new Hover
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true
                },
                Scales = new Scales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date",
                            },
                            Time = new TimeOptions
                            {
                                TooltipFormat = "LL"
                            },
                            Ticks = new TimeTicks
                            {
                                FontColor = "#ffffff"
                            },
                            GridLines = new GridLines
                            {
                                Color = "#6c757d"
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Balance"
                            },
                            Ticks = new LinearCartesianTicks
                            {
                                FontColor = "#ffffff",
                                Callback = new JavaScriptHandler<AxisTickCallback>("chartCallbacks.formatCurrencyString")
                            },
                            GridLines = new GridLines
                            {
                                Color = "#6c757d"
                            }                            
                        }
                    }
                },
                Legend = new Legend
                {
                    Labels = new LegendLabels
                    {
                        FontColor = "#ffffff"
                    }
                }
            },
        };
                    
        foreach (Account account in Context.Accounts)
        {
            LineConfig.Data.Datasets.Add(new LineDataset<TimePoint>(account.Balances.Select(balance => new TimePoint(balance.Timestamp.Date, balance.Value)))
            {
                Label = account.Name,
                LineTension = 0,
                Fill = false,
                BorderColor = colors[account.Order % 10]
            });
        }

        await RefreshBalance();
    }

    private async Task ToggleAccountCreation()
    {
        if (!IsShowingAccountCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 38);
            IsShowingAccountCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 0);
            IsShowingAccountCreation = false;
        }
    }

    private async Task CreateAccount()
    {
        if (string.IsNullOrWhiteSpace(NewAccountName) || await Context.FindAsync<Account>(NewAccountName) != null)
        {
            await JSRuntime.InvokeAsync<string>("alert", $"Please enter a valid unique name for the account.");
            return;
        }

        Context.Accounts.Add(new Account
        {
            Name = NewAccountName,
            Order = !Context.Accounts.Any() ? 1 : Context.Accounts.OrderByDescending(account => account.Order).First().Order + 1
        });
        await Context.SaveChangesAsync();

        NewAccountName = string.Empty;
        await ToggleAccountCreation();
        await JSRuntime.InvokeAsync<string>("UncheckElement", AccountCreationCheckboxReference);
    }

    private async Task RefreshBalance()
    {
        NetWorth = Context.Accounts.Sum(account => account.CurrentBalance);
        await InvokeAsync(StateHasChanged);
    }
}
