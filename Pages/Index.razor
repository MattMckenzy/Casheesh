@page "/"
@inject IJSRuntime JSRuntime
@inject CasheeshContext Context

<div class="m-0">
    <div class="row m-0 w-100 align-items-center">

        <img src="favicon.ico" style="height:64px;" class="col-auto p-0 m-3" />
        <h2 class="col m-0 p-0 text-stroke">Casheesh</h2>
        <div class="col-auto m-3 p-0 button-container button-container-36">
            <input @ref="AccountCreationCheckboxReference" class="invisible-toggle" type="checkbox" id="AccountCreationToggle" />
            <label class="button-label button-label-36 m-0" for="AccountCreationToggle">
                <i class="button-bright position-absolute open-button mdi mdi-bank-plus mdi-36px icon-responsive-36" @onclick="ToggleAccountCreation"></i>
                <i class="button-bright position-absolute close-button mdi mdi-close mdi-36px icon-responsive-36" @onclick="ToggleAccountCreation"></i>
            </label>
        </div>
    </div>

    <div @ref="AccountCreationContainerReference" class="hidden-container d-flex flex-row bd-highlight align-items-center overflow-hidden justify-content-end mb-3 mr-2">
        <label class="text-stroke m-0 mr-2">Name:</label>
        <input @bind="NewAccountName" class="name-input m-0 mr-2" Name="NewAccountName" />
        <i class="button-bright mdi mdi-content-save icon-responsive m-0" @onclick="CreateAccount"></i>
    </div>

    <div class="d-flex flex-wrap m-0 justify-content-center">
        @foreach (Account account in Context.Accounts)
        {
            <AccountCard Account="account" />
        }
    </div>
</div>

@code
{
    private string NewAccountName { get; set; }
    private bool IsShowingAccountCreation { get; set; } = false;
    private ElementReference AccountCreationCheckboxReference { get; set; }
    private ElementReference AccountCreationContainerReference { get; set; }

    private async Task ToggleAccountCreation()
    {
        if (!IsShowingAccountCreation)
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 38);
            IsShowingAccountCreation = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("ChangeElementHeight", AccountCreationContainerReference, 0);
            IsShowingAccountCreation = false;
        }
    }

    private async Task CreateAccount()
    {
        if (string.IsNullOrWhiteSpace(NewAccountName) || await Context.FindAsync<Account>(NewAccountName) != null)
        {
            await JSRuntime.InvokeAsync<string>("alert", $"Please enter a valid unique name for the account.");
            return;
        }

        Context.Accounts.Add(new Account { Name = NewAccountName });
        await Context.SaveChangesAsync();

        NewAccountName = string.Empty;
        await ToggleAccountCreation();
        await JSRuntime.InvokeAsync<string>("UncheckElement", AccountCreationCheckboxReference);
    }
}
